name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    
    # Using SQLite for tests (simpler setup)

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_pgsql, dom, filter, gd, iconv, json, mbstring, pdo, xml
        coverage: xdebug

    - name: Copy .env
      run: |
        cd applications/doc-viewer
        cp .env.example .env
        # Configure SQLite for testing
        echo "DB_CONNECTION=sqlite" >> .env
        echo "DB_DATABASE=database/database.sqlite" >> .env

    - name: Install Dependencies
      run: |
        cd applications/doc-viewer
        composer install --prefer-dist --no-interaction

    - name: Generate key
      run: |
        cd applications/doc-viewer
        php artisan key:generate

    - name: Directory Permissions
      run: |
        cd applications/doc-viewer
        chmod -R 777 storage bootstrap/cache
        # Create SQLite database file
        touch database/database.sqlite

    - name: Create Database
      run: |
        cd applications/doc-viewer
        php artisan migrate:fresh

    - name: Execute tests (Unit and Feature)
      run: |
        cd applications/doc-viewer
        php artisan test --coverage-html coverage --coverage-text

    - name: Show coverage summary
      run: |
        cd applications/doc-viewer
        echo "Test coverage completed successfully!"

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run linter
      run: |
        cd frontend
        npm run lint

    - name: Run tests
      run: |
        cd frontend
        npm test

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # Security Check
  security-check:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'

    - name: Install Dependencies
      run: |
        cd applications/doc-viewer
        composer install --prefer-dist --no-interaction

    - name: Run Security Check
      run: |
        cd applications/doc-viewer
        composer audit

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'

    - name: Install Dependencies
      run: |
        cd applications/doc-viewer
        composer install --prefer-dist --no-interaction

    - name: Run PHPStan
      run: |
        cd applications/doc-viewer
        echo "PHPStan not configured yet"

    - name: Run PHP CS Fixer
      run: |
        cd applications/doc-viewer
        echo "PHP CS Fixer not configured yet"

  # Docker Build Test
  docker-test:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: docker build -t chainview:test .

    - name: Test Docker image
      run: |
        docker run --rm chainview:test echo "Docker image built successfully"

  # Deploy to Staging (only on main branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-check, code-quality, docker-test]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: docker-compose up -d

  # Notifications
  notify:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-check, code-quality, docker-test]
    if: always()

    steps:
    - name: Notify on failure
      if: failure()
      run: |
        echo "Pipeline failed! Check the logs for details."
        # Add notification logic here (Slack, email, etc.)

    - name: Notify on success
      if: success()
      run: |
        echo "Pipeline completed successfully! ðŸŽ‰"
        # Add notification logic here (Slack, email, etc.)
