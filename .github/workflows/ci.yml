name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: applications/doc-viewer
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_pgsql, dom, filter, gd, json, pdo
          coverage: xdebug

      - name: Copy .env (SQLite)
        run: |
          cp .env.example .env
          echo "APP_KEY=" >> .env
          echo "DB_CONNECTION=sqlite" >> .env
          echo "DB_DATABASE=${{ github.workspace }}/applications/doc-viewer/database/database.sqlite" >> .env

      - name: Install Dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Generate key
        run: php artisan key:generate --force

      - name: Directory Permissions
        run: |
          mkdir -p database
          touch database/database.sqlite
          chmod -R 777 storage bootstrap/cache

      - name: Migrate fresh
        run: php artisan migrate:fresh -n

      - name: Run tests with coverage
        env:
          XDEBUG_MODE: coverage
        run: php artisan test --coverage-html coverage --coverage-text

  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci || (rm -rf node_modules package-lock.json && npm install)

      - name: Lint
        run: npm run lint --if-present

      - name: Test
        env:
          CI: true
        run: npm test --if-present

      - name: Build
        env:
          NODE_ENV: production
        run: npm run build

  security-check:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    defaults:
      run:
        working-directory: applications/doc-viewer
    steps:
      - uses: actions/checkout@v4
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
      - name: Install Dependencies
        run: composer install --no-interaction --no-progress
      - name: Composer Audit
        run: composer audit || true  # nÃ£o falha a pipeline; troque para 'set -e' se quiser bloquear

  docker-test:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        run: docker build -t chainview:test .
      - name: Smoke test
        run: docker run --rm chainview:test echo "Docker image built successfully"

  notify:
    runs-on: ubuntu-latest
    if: always()
    needs: [backend-tests, frontend-tests, security-check, docker-test]
    steps:
      - name: Notify status
        run: |
          if [ "${{ needs.backend-tests.result }}" = "failure" ] || \
             [ "${{ needs.frontend-tests.result }}" = "failure" ] || \
             [ "${{ needs.security-check.result }}" = "failure" ] || \
             [ "${{ needs.docker-test.result }}" = "failure" ]; then
            echo "Pipeline failed! Check logs."
          else
            echo "Pipeline completed successfully! ðŸŽ‰"
          fi
